package com.example.navigation_test.presentation.screensimport android.util.Logimport androidx.compose.foundation.ExperimentalFoundationApiimport androidx.compose.foundation.gestures.detectTapGesturesimport androidx.compose.foundation.layout.*import androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.*import androidx.compose.runtime.Composableimport androidx.compose.runtime.livedata.observeAsStateimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.saveable.rememberSaveableimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.scaleimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.input.pointer.pointerInputimport androidx.compose.ui.res.colorResourceimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.lifecycle.viewmodel.compose.viewModelimport androidx.navigation.NavHostControllerimport com.example.navigation_test.Rimport com.example.navigation_test.domain.models.Todoimport com.example.navigation_test.presentation.MainViewModelimport com.example.navigation_test.presentation.navigation.ScreenRouts@OptIn(ExperimentalMaterialApi::class, ExperimentalFoundationApi::class)@Composablefun TodoListScreen(    paddingValues: PaddingValues,    navHostController: NavHostController,) {    val viewModel: MainViewModel = viewModel()    val addTodoViewModel: AddTodoScreenViewModel = viewModel()    val todos = viewModel.todoList.observeAsState(listOf())    LazyColumn(        contentPadding = PaddingValues(8.dp),        verticalArrangement = Arrangement.spacedBy(8.dp)    ) {        items(todos.value, key = { it.id }) { todo ->            val dismissState = rememberDismissState()            if (dismissState.isDismissed(DismissDirection.EndToStart)) {                viewModel.deleteTodo(todo)            }            SwipeToDismiss(                modifier = Modifier.animateItemPlacement(),                state = dismissState,                background = {},                directions = setOf(DismissDirection.EndToStart)            ) {                TodoItem(                    todo = todo,                    viewModel = viewModel,                    navHostController = navHostController                )            }        }    }}@Composablefun TodoItem(    todo: Todo,    viewModel: MainViewModel,    navHostController: NavHostController) {    val addTodoScreenViewModel: AddTodoScreenViewModel = viewModel()    val successShouldScreen = addTodoScreenViewModel.shouldCloseScreen.observeAsState()    val cardColor = if (todo.completed) {        colorResource(id = R.color.purple_200)    } else {        colorResource(id = R.color.purple_700)    }    Card(        modifier = Modifier            .fillMaxWidth()            .pointerInput(Unit) {                detectTapGestures(                    onLongPress = {                        navHostController.navigate(ScreenRouts.EditTodoScreen.getRoutWithArgs(todo))                    }                )            },        backgroundColor = cardColor,        shape = RoundedCornerShape(8.dp),        elevation = if (!todo.completed) 4.dp else 0.dp,    ) {        Row(            verticalAlignment = Alignment.CenterVertically,            modifier = Modifier.padding(4.dp)        ) {            Column(modifier = Modifier.weight(1f)) {                Text(                    text = todo.title,                    fontSize = 20.sp,                    fontWeight = FontWeight.Bold,                    color = Color.LightGray                )                Text(                    text = todo.description,                    fontSize = 18.sp,                )            }            val checked = rememberSaveable {                mutableStateOf(todo.completed)            }            Checkbox(                checked = todo.completed,                onCheckedChange = {                    viewModel.changeEnableState(todo)                },                colors = CheckboxDefaults.colors(uncheckedColor = Color.White),                modifier = Modifier.scale(1.3F)            )        }    }}