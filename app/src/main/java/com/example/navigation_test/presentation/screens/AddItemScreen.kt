package com.example.navigation_test.presentation.screensimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.paddingimport androidx.compose.material.*import androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.ArrowBackimport androidx.compose.runtime.*import androidx.compose.runtime.livedata.observeAsStateimport androidx.compose.runtime.saveable.rememberSaveableimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.platform.LocalFocusManagerimport androidx.compose.ui.res.stringResourceimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.lifecycle.viewmodel.compose.viewModelimport androidx.navigation.NavHostControllerimport com.example.navigation_test.Rimport com.example.navigation_test.domain.models.Todoimport com.example.navigation_test.presentation.navigation.ScreenRouts@Composablefun AddItemScreen(    screenMode: String,    navHostController: NavHostController,    todo: Todo? = null) {    val viewModel: AddTodoScreenViewModel = viewModel()    val addTodoScreenViewModel: AddTodoScreenViewModel = viewModel()    val successShouldScreen = viewModel.shouldCloseScreen.observeAsState()    val errorStateNameText by viewModel.errorInputName.observeAsState()    val errorStateDescriptionText by viewModel.errorInputDescription.observeAsState()    Scaffold(        topBar = {            TopAppBar {                IconButton(onClick = {                    navHostController.popBackStack()                })                {                    Icon(                        Icons.Default.ArrowBack,                        contentDescription = "Back"                    )                }            }        }    ) {paddingValues->        var nameTextSate by rememberSaveable {            mutableStateOf(todo?.title ?: "")        }        var descriptionTextState by rememberSaveable {            mutableStateOf(todo?.description ?: "")        }        val keyboardFocusManager = LocalFocusManager.current        Column(            modifier = Modifier                .padding(8.dp)                .fillMaxSize(),            horizontalAlignment = Alignment.CenterHorizontally        ) {            Column(                modifier = Modifier.weight(1f).padding(paddingValues),            ) {                InputText(                    modifier = Modifier.fillMaxWidth(),                    label = stringResource(R.string.label_name),                    value = nameTextSate,                    errorValidText = errorStateNameText == true,                    onValueChange = {                        nameTextSate = it                        addTodoScreenViewModel.resetErrorInputName()                    },                    placeHolder = stringResource(R.string.todo_title),                    errorState = errorStateNameText == true,                )                ShowTextError(errorStateNameText,"поле name не может быть пустым")                InputText(                    modifier = Modifier.fillMaxWidth(),                    label = stringResource(R.string.label_description),                    value = descriptionTextState,                    errorValidText = errorStateDescriptionText == true,                    onValueChange = {                        descriptionTextState = it                        addTodoScreenViewModel.resetErrorInputDescription()                    },                    placeHolder = stringResource(R.string.todo_description),                    errorState = errorStateDescriptionText == true,                )                ShowTextError(errorStateDescriptionText,"поле description не может быть пустым")            }            Button(                onClick = {                    todo?.let { addTodoScreenViewModel.getTodoItem(it) }                    when (screenMode) {                        ScreenRouts.ADD_TODO_SCREEN_MODE -> viewModel.addTodo(                            nameTextSate,                            descriptionTextState                        )                        ScreenRouts.EDIT_TODO_SCREEN_MODE -> addTodoScreenViewModel.editTodo(                            nameTextSate,                            descriptionTextState                        )                    }                    if (successShouldScreen.value == Unit) {                        navHostController.popBackStack()                        keyboardFocusManager.clearFocus()                    }                },                modifier = Modifier.fillMaxWidth()            ) {                when (screenMode) {                    ScreenRouts.ADD_TODO_SCREEN_MODE -> Text(text = stringResource(R.string.add_todo))                    ScreenRouts.EDIT_TODO_SCREEN_MODE -> Text(text = stringResource(R.string.edit_todo))                }            }        }    }}@Composableprivate fun ShowTextError(errorState: Boolean?, text: String) {    if (errorState == true) {        return Text(            modifier = Modifier.padding(1.dp),            text = text,            color = Color.Red,            fontSize = 14.sp,        )    }}