package com.example.navigation_test.presentation.screensimport android.app.Applicationimport androidx.lifecycle.*import com.example.navigation_test.data.TodoRepositoryImplimport com.example.navigation_test.domain.models.Todoimport com.example.navigation_test.domain.useCases.AddTodoUseCaseimport com.example.navigation_test.domain.useCases.EditTodoUseCaseimport com.example.navigation_test.domain.useCases.GetTodoUseCaseimport kotlinx.coroutines.launchclass AddTodoScreenViewModel(application: Application) : AndroidViewModel(application) {    private val repository = TodoRepositoryImpl(application)    private val addTodoUseCase = AddTodoUseCase(repository)    private val editTodoUseCase = EditTodoUseCase(repository)    private val getTodoUseCase = GetTodoUseCase(repository)    private val _errorInputName = MutableLiveData<Boolean>()    val errorInputName: LiveData<Boolean> = _errorInputName    private val _errorInputDescription = MutableLiveData<Boolean>()    val errorInputDescription: LiveData<Boolean> = _errorInputDescription    private val _shouldCloseScreen = MutableLiveData<Unit>()    val shouldCloseScreen: LiveData<Unit> = _shouldCloseScreen    private val _todoItem = MutableLiveData<Todo>()    val todoItem: LiveData<Todo> = _todoItem    fun getTodoItem(todo: Todo) {        viewModelScope.launch {            _todoItem.value = todo        }        finishWork()    }    fun addTodo(inputName: String?, inputDescription: String?) {        val name = parseName(inputName)        val description = parseDescription(inputDescription)        val fieldsValid = validateInput(name, description)        if (fieldsValid) {            viewModelScope.launch {                val todoItem = Todo(                    title = name,                    description = description,                    completed = false                )                addTodoUseCase.invoke(todoItem)            }            finishWork()        }    }    fun editTodo(inputName: String?, inputDescription: String?) {        val name = parseName(inputName)        val description = parseDescription(inputDescription)        val fieldsValid = validateInput(name, description)        if (fieldsValid) {            viewModelScope.launch {                _todoItem.value?.let {                    val item = it.copy(title = name, description = description)                    editTodoUseCase.invoke(item)                }                finishWork()            }        }    }    private fun parseName(inputName: String?): String {        return inputName?.trim() ?: ""    }    private fun parseDescription(inputDescription: String?): String {        return inputDescription?.trim() ?: ""    }    private fun validateInput(name: String, description: String): Boolean {        var result = true        if (name.isBlank()) {            _errorInputName.value = true            result = false        }        if (description.isBlank()) {            _errorInputDescription.value = true            result = false        }        return result    }    fun resetErrorInputName() {        _errorInputName.value = false    }    fun resetErrorInputDescription() {        _errorInputDescription.value = false    }    private fun finishWork() {        _shouldCloseScreen.value = Unit    }}